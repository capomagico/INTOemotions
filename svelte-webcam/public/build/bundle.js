
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function (internal, svelte) {
	'use strict';

	/* src/App.svelte generated by Svelte v3.59.2 */

	const { console: console_1 } = internal.globals;
	const file = "src/App.svelte";

	function create_fragment(ctx) {
		let div;
		let video_1;

		const block = {
			c: function create() {
				div = internal.element("div");
				video_1 = internal.element("video");
				video_1.autoplay = true;
				video_1.playsInline = true;
				internal.attr_dev(video_1, "class", "svelte-1s2jnhw");
				internal.add_location(video_1, file, 37, 1, 649);
				internal.attr_dev(div, "class", "webcam-container svelte-1s2jnhw");
				internal.add_location(div, file, 36, 2, 617);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				internal.insert_dev(target, div, anchor);
				internal.append_dev(div, video_1);
			},
			p: internal.noop,
			i: internal.noop,
			o: internal.noop,
			d: function destroy(detaching) {
				if (detaching) internal.detach_dev(div);
			}
		};

		internal.dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		internal.validate_slots('App', slots, []);
		let video;

		async function startWebcam() {
			video = document.querySelector('video');

			try {
				const stream = await navigator.mediaDevices.getUserMedia({ video: true });
				video.srcObject = stream;
			} catch(err) {
				console.error('Error accessing webcam:', err);
			}
		}

		svelte.onMount(() => {
			startWebcam();
		});

		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
		});

		$$self.$capture_state = () => ({ onMount: svelte.onMount, video, startWebcam });

		$$self.$inject_state = $$props => {
			if ('video' in $$props) video = $$props.video;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [];
	}

	class App extends internal.SvelteComponentDev {
		constructor(options) {
			super(options);
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, {});

			internal.dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "App",
				options,
				id: create_fragment.name
			});
		}
	}

	const app = new App({
	  target: document.getElementById('app'),
	});

	return app;

})(internal, svelte);
//# sourceMappingURL=bundle.js.map
